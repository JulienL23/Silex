----------------------
SILEX :
----------------------

-------------------------------------------------------------------
SOMMAIRE :

Intro : Qu'est-ce que Silex ?
Etape 0 : Base notre app : site_mvc (procédural)
Etape 1 : Installation de silex
Etape 2 : Démarrage et compréhension
Etape 3 : Le routing avec silex
Etape 4 : Virtual host
Etape 5 : HTACCESS : On retire 'index.php'
Etape 6 : Démarrage de notre application BOUTIQUE
Etape 7 : Utilisation des services Silex (Doctrine DBAL)
Etape 8 : Utilisation des services Silex (Twig)
Etape 9 : Utilisation des services Silex (Bootstrap)
Etape 10 : Ajout des commentaires à nos produits (Injection de dépendance)
Etape 11 : La class DAO ( design pattern: comment transformer un tableau multidimentionnel composé d'array, en un tableau multidimentionnel composé d'objet)
Etape 12 : Héritage TWIG
Etape 13 : Gestion de la sécurité (connexion)
Etape 14 : Class MembreDAO et UserProviderInterface
Etape 15 : Formulaire de connexion
Etape 16 : Formulaire d'inscription
Etape 17 : Formulaire de contact
Etape 18 : BACKOFFICE
Etape 19 : Réorganisation en Controler
Etape 20 :Préparation de la mise en prod
-------------------------------------------------------------------

-----------------------------
Intro : Qu'esc-ce que Silex ?
-----------------------------

1/ Avantages à utiliser un FrameWork ?

    A/ Choix d'une organisation optimisée. Il est très difficile de conceptualiser soi-même une application en objet (un Framework maison). Où vont les controller ? Les models ? Les vues ? Aucune réponse n'est parfaite mais chacun à sa propre organisation cohérente... ou pas.

    B/ Fonctionnalités communes : Un framework permet de récupérer des briques déjà existantes... et les récupérer du site A vers le site B etc... (Briques : Connexion, inscription, session, commentaire...)

    C/Services disponnibles : Tous les frameworks proposent des services : routage(routing), la sécurité, la gestion du cache etc...
    Cela vous permet de vous concentrer et de passer plus de temps au développement de vos propres fonctionnalités !

2/ Quel choix de Framework ?

    A/Son propre, Framework maison ?
        Trés formateur !! On peut toujours l'améliorer et l'utilisation dans des projets persos... par contre : pas de communauté, pas de doccumentation et c'est difficile de garantir tous les aspects de sécurité.

    B/ Framework du marché : FullStack
        - Framework Fullstack (Symphony, Zend, Cake) : Beaucoup de services disponnibles, grosses communauté, mais un déploiement très lourd et une architecture IMPOSEE.

        - Mini-framework (Laravel et Silex) : Propose des services "à la carte" et une architecture plus souple.

3/ Et silex dans tout ca ?

    A/ Silex est un framework développé par les équipes SensioLabs, qui sont les créateurs de Symfony. Il repose sur les mêmes composants.

    B/ On dit que Silex est un mini-framework, parfait pour l'apprentissage et la compréhension de la logique Framework. Parfait également pour développer des applications rapidement et première étape intéréssante dans l'apprentisage de Symfony.

    C/ Documentation : https://silex.sensiolabs.org/doc/2.0

----------------------------------------------------------------------------
ETAPE 0 : Base de notre app : site_mvc (procédural) (Modèle-vue-contrôleur)
----------------------------------------------------------------------------

Pour commencer la compréhension de silex, nous allons partir sur la base d'un morceau de site en procédural et en MVC afin d'avancer étape par étape :

silex/site_mvc/
    -> CSS/ (copier de votre ancien site procédural)
    -> photo/ (copier de votre ancien site procédural)
    -> index.php (vide)
    -> model.php (vide)
    -> view.php (vide)

----------------------------------------------------
ETAPE 1 : Instalation de Silex
----------------------------------------------------
Sommaire :
1/ Installation de composer
2/ Création du dossier boutique
3/ Commande pour télécharger les composant de Silex
3.bis : Autre technique pour télécharger les composants de silex
4/ tour d'horizon des composants
-----

1/ Installation de composer
    Composer est un outil de gestion des dépendances. Il permet d'installer des services (composant, dépendances) et est relié à un fichier composer.json.

        -> Télécharger composer
        -> Installer composer (en précisant php.exe)

2/ Création du dossier silex/BOUTIQUE
    OK

3/ Commande pour télécharger les composant de Silex
    -> On se place dans le dossier BOUTIQUE/
    -> Maj + clicdroit  > "Ouvrir la fenêtre de commande ici"

    <cmd>
    composer require silex/silex "~2.0"

3bis/ composer.json
    <code>
    {
        "require": {
            "silex/silex": "~2.0"
        }
    }

    <cmd>
    composer update

4/Les composants :
    Le dossier Vendor correspond aux coeur de notre Framework. Il contient tous les composant récupéré de Silex/Symfony, sur lesquels nous n'intervendront JAMAIS !!!

----------------------------------------------------
ETAPE 2 : Démarrage et compétence
----------------------------------------------------
Sommaire :
1/ Cr&ation du repertoire web
2/ Création du fichier index.php
-----

1/ repertoire web
    ->A la racine de notre application BOUTIQUE/web/
    ->Ce dossier constitue notre repertoire web, cela signifie qu'il va contenir tout ce qui est visible et accessible pour l'internaute
    (index.php, photo, img, fonts, js, css...)

2/ créer web/index.php
    -> D'abord on require l'autoload qui se chargera de require tous les fichiers dont on aura besoin. PRATIQUE !!

    -> On instancie la classe Application : L'objet $app va représenter notre application et nous donne accès à toutes les fonctionnalités de Silex.

    -> Méthode run() : lancement de l'application.

----------------------------------------------------
ETAPE 3 : Le routing avec silex
----------------------------------------------------
Sommaire :
1/ Route Hello World
2/ Route Hello {$name}
3/ La fonction Get de notre application
4/ Arguments
5/ fonction espace()
-------

1/ Route Hello World
    -> $app -> get() est la fonction qui nous permet de créer une nouvelle route. Chaque route est une action dans notre application. Ensuite nous rengerons toutes nos actions dans des controllers, pour optimiser notre organisation.

2/ Route Hello {$name}
    -> Création de la route /hello/{name}
    -> Test : localhost/silex/BOUTIQUE/web/index.php/hello/Julien

3/ La fonction Get
    -> A chaque nouvelle fonctionnalité, on va utiliser la fonction get de $app, qui nous créer une nouvelle route. En plus de get, il existe post() et match(). Nous les verrons plus tard.

4/ Arguments:
    -> Le premier argument est le nom de la route. Les paramètres contenus dans les URL sont alors déclaré en {}
    -> Le second argument function() est ce que l'on appelle une "closure" ou "fonction anonyme". Elle signifie que ce qui va suivre sera exécuté. Une fonction dans une fonction finalement. Elle peut recevoir les paramètres dynamique de notre URL, (ex : function($name)).

5/ Ma méthode escape()
    -> la fonction escape() permet simplement d'afficher le parametre contenu dans la route. La méthode escape() permet d'éviter les injections SQL dans votre URL.

----------------------------------------------------
ETAPE 4 : Virtual Host
----------------------------------------------------
Sommaire :
1/ Modifier le fichier vhost (apache)
2/ Modifier le fichier conf (apache)
3/ Modifier le fichier Host (system 32)
-----

1/ Modification du fichier vhost :
    > c:\xampp\apache\conf\extra\httpd-vhosts.conf

2/ Modification du fichier conf :
    > c:\xampp\apache\conf\httpd.conf

3/ Modification du fichier Hosts dans system32
    > c:\windows\system32\drivers\etc\hosts

        127.0.0.1   localhost
        127.0.0.1   www.boutique.dev

        <code>
        <VirtualHost *:80>
            DocumentRoot "C:\xampp\htdocs\silex\BOUTIQUE\web"
            ServerName BOUTIQUE
            ServerAlias www.boutique.dev
            <Directory "C:\xampp\htdocs\silex\BOUTIQUE\web">
                AllowOverride all
            </Directory>
        </VirtualHost>

-------------------------------------------
ETAPE 5 : HTACCESS POUR RETIRER INDEX.PHP :
-------------------------------------------
    -> Créer dans le dossier web de notre application, test.txt
        -> Ensuite dans le fichier test.txt écrire le <code> ci-dessous

        <IfModule mod_rewrite.c>
            Options -MultiViews

            RewriteEngine On
            RewriteCond %{REQUEST_FILENAME} !-f
            RewriteRule ^ index.php [QSA,L]
        </IfModule>

    -> Enregistrer le fichier avec l'extension .htaccess. Pour ce faire, selectionner tous les formats
        -> Save as  > web > et le nommé .htaccess
        -> Enfin supprimer le fichier test.txt


Test à effectuer : www.boutique.dev/hello/julien

-------------------------------------------
ETAPE 6 : DEMARRAGE DE L'APPLICATION :
-------------------------------------------
Sommaire :
1/ Création des dossiers
2/ Récupérer les fichiers (de notre base site_mvc)
3/ Création du fichier de routes
4/ Ré-écriture de index.php
-----

1/ Création des dossiers :
    BOUTIQUE/
        web/       (déja créé)
        vendor/    (déja créé)
        app/       (config de l'application)
        db/        (script de creation de la bdd)
        src/       (fichiers source de notre application)
        views/     (les vues de notre application)

2/ Récupérer les fichiers (de notre base site_mvc)
Dans un premier temps on va gérer l'affichage de nos produits (boutique.php)
    -> model.php à copier/coller dans src/
    -> view.php à copier/coller dans views/
    -> css/ photo à copier/coller dans web/
    -> photo/ à copier/coller dans web/

3/ Créer un fichier de routes (qui va contenir toutes nos routes)
    -> app/routes.php
    -> On re-créer la route '/' (la home), dans laquelle on va récupérer les infos de tous nos produits (grâce à model.php et sa fonction afficheAll()) et on les affiche via le concept render() (temporisation puis affichage)

4/ Ré-écriture de index.php
    -> A ce stade nous avons plus besoin des 2 routes écrites dans index.php, mais on a besoin de require notre fichier de routes (routes.php)
    -> On ajoute le mode débug car nous sommes en dev.

Test : www.boutique.dev

A ce stade, nous devrions avoir la boutique qui s'affiche sur la home de notre nouveau site.
En revanche, nous sommes en procédural... Il va donc falloir ajouter une couche OBJET.


-------------------------------------------
ETAPE 7 : UTILISATION DES SERVICES SILEX :
Doctrine BDAL + modélisation objet
-------------------------------------------
Sommaire :
1/ Creation de la classe Produit dans src/Entity
2/ Remplacement de PDO par Doctrine DBAL
3/ Créer le dossier DAO (Data Acces Object)
4/ Ajouter le fichier ProduitDAO.php
5/ Mise à jour de l'application via composer
6/ Création du fichier app.php dans app/
7/ Création du fichier prod.php dans app/config/
8/ Création du fichier dev.php dans app/config/
9/ Modification des routes
10/ Modifications de la vue
11/ Modification de l'index.php
------

1/ Creation de la classe Produit dans src/Entity
    -> Creation de la classe Produit dans src/Entity/Produit.php
    -> Cette classe va servir de plan de fabrication d'un objet Produit. Un prototype. Il contient toutes les propriétés de l'entité produit (private) et tous les getter/setters.
    On dit que cette classe est un POPO (Plain Old PHP Object)

2/ Remplacement de PDO par Doctrine DBAL
    -> Doctrine DBAL (Database Abstract Layer) : Fait la même chose que PDO mais améliore le système de requête. Ce service de Silex, nous permet également une connexion compatible avec tout type de gestion de BDD. Il nous récupère la connexion dans un SINGLETON sans qu'on ait besoin de le faire nous même.

3/ Création du dossier DAO dans src/
    -> DAO : Data Acces Object : DAO est design pattern qui répond à la question;
    Comment récupérer des infos depuis la base de données non pas sous forme d'array, maissous forme d'objets ? ==> voir la méthode (buildProduit())

4/ Création du fichier produitDAO.php dans src/DAO/.
    -> Ce fichier correspond à notre MODEL PRODUIT. C'est lui qui va gérer toutes les requêtes auprès de la table produit, et nous renvoyer les résultats sous forme d'object.
    -> Récupérer la connection à la BDD grâce a Doctrine\DBAL\Connexion
    -> On stocke cette connexion dans la propriété private $db
    -> Chaque requête sur la table Produit sera représenté par une fonction(findAll, findAllById, findAllByCategorie, findAllCategorie, etc...)
    -> Pour chacune de ces requêtes, quand cela est possible, on va transformer les résultats d'array en objet frâce à la méthode buildProduit().

    ----> DAO est un design pattern qui permet de modéliser sous form d'objet(Entity) les résultats d'une requête.

5/ Mise à jour de notre application
    -> modifier notre fichier composer.json
    <code>
    {
        "require": {
            "silex/silex": "~2.0",
            "doctrine/dbal": "2.5"
        }
        "autoload": {
            "psr-4" : {"BOUTIQUE\\": "src"}
        }
    }

    <cmd>
    composer update

    -> Cette commande à fait :
        - Récupérer les composants Doctrine DBAL
        - Mise à jour l'autoload selon la norme PSR-4(les nom des namespaces correspondent à des nom de dossier)

6/ Création du fichier app.php dans le dossier app/
    -> Ce fichier représente les paramètres de notre Application. Quand vous déplacerez votre application d'un server à un autre en théorie vous ne devrez modifier que ce fichier la... A l'instar de init.inc.php dans notre procédural.

    -> Les deux premieres lignes (use ErrorHandler et ExceptionHandler) permettent à notre application de férer les erreurs sous forme d'exception. Les composant Symfony prennent la main sur la gestion des erreurs PHP.

    -> Ensuite on enregistre le fournisseur de service associé à Doctrine DBAL. A faire pour tous les services utilisés.

    -> Enfin on déclare/enregistre notre class ProduitDAO dans notre $app['dao.produit']. Cela nous permettra de rendre plus simple l'utilisation de notre instance de la classe ProduitDAO. $app['db'] représente par ailleurs notre connexion à la BDD grâce à Doctrine DBAL.

7/ Création du fichier prod.php dans app/config
    -> Ce fichier contient toutes les infos de conexion à la bdd

8/ Création du fichier dev.php dans app/config
    -> ce fichier contient les infos relative à la phase de dev.

9/ modification du fichier routes.php
    -> On remplace l'ancien require model.php qui nous permettait d'accéder à la méthode afficheAll() par une instanciation de ProduitDAO ($app['produitDAO']) qui est notre nouveau model. Dans ce nouveau model on exécute findAll() et findAllCategorie.
    --->La logique Controller / Model reste la même qu'auparavant.

    /!\ ATTENTION : Dans notre vue view.php, nous utilisons des arrays ($produit['titre']) mais maintenant on doit utiliser des objets ($produit -> getTitre())

10/ Modification de view.php
    -> on remplace les arrays par l'utilisation des getter :
    ARRAY : <?= $pdt['titre'] ?>
    ARRAY : <?= $pdt -> getTitre() ?>
    TWIG  : {{ pdt.titre }}

11/ Modification du fichier index.php
    -> On met en commentaire $app['debug'] - true; , puisquenous l'avons mis dans dev.php.
    -> On ajoute les require de app.php et dev.php avant le require de routes.php

---> A ce stade, notre home doit afficher tous les produit et le menu des categories.
---> Cette étape nous a permis d'introduire une modélisation objet (propre à silex : DAO, Routing...)
---> Nous avons beaucoup travaillé la partie MODELS (DAO) et CONTROLLER (Routes.php), à l'étape suivante nous allons nous intéresser à la partie VIEWS avec TWIG

--------------------------------------------------
ETAPE 8 : UTILISATION DES SERVICES SILEX (Twig) :
(Ajout de l'utilisation de la fonction render)
--------------------------------------------------
Sommaire:
1/ Intro
2/ Modification composer.Json
3/ Mise à jour via composer
4/ Modification de app.php (enregistrement des nouveaux services)
5/ Modification des fichiers view.php, produit.php en Twig
6/ Fonction render() : modification des routes
--------

1/ Intro :
    -> Il existe plusieurs moteurs template : Liquid, TPL, smarty, Blade et Twig.
        Pour Symfony et Silex, le moteur c'est TWIG.

    -> De manière générale un moteur de template permet de simplifié l'insertion de variables et de boucles PHP dans des blocs HTML. (idée des formes contractée)

    -> TWIG à l'avantage de proposer un système d'héritage. En d'autres termes, des morceaux d'HTML vont hérité d'autres morceaux d'HTML.
        Exemple : Le formulaire d'inscription hérite du template générale de la page.

2/ Modification du json :
    <code>
    {
    "require": {
        "silex/silex": "~2.0",
        "doctrine/dbal": "2.5",
        "twig/twig": "~1.28"
    },
    "autoload": {
        "psr-4" : {"BOUTIQUE\\": "src"}
    }
}

3/ Mise à jour via composer
    <cmd> ( clique droit + maj dans BOUTIQUE )
    composer update

4/ Modification de app.php
    -> enregistrement aux services Twig
    -> l'enregistrement nécessite qu'on passe en argument

    <code>
    $app -> register(new Silex\Provider\TwigServiceProvider(), array(
        'twig.path' -> __DIR__ . '/../views'
    ));

5/ Modification de nos vues :
    -> view.php --> index.html.twig
    -> produit.php ---> produit.html.twig


    <php>
    // Commentaire en php

    $produit -> getTitre()
    <?php foreach($produit as $pdt) ?>
    $produit -> getTitre()

    <twig>
    {# commentaire en twig #}

    {% for pdt in produits %}
        {{pdt.titre}}
    {% endfor; %}

6/ Modification des routes
    -> ajout de la méthode render()

---> A ce stade, notre home doit s'afficher. Test : www.boutique.dev.
---> En savoir plus sur Twig : https://twig.symfony.com/
